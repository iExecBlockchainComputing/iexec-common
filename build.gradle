plugins {
    id 'java-library'
    id 'eclipse'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'io.freefair.lombok' version '5.3.0'
}

group = 'com.iexec.common'
sourceCompatibility = 11
targetCompatibility = 11

ext {
    // ./gradlew build -Pdev
    isDev = project.hasProperty('dev')
    gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    // dependency versions
    dockerJavaVersion = '3.2.12'
    mockServerVersion = '5.11.2'
    openFeignVersion = '11.7'
}

if (gitBranch != 'main' && gitBranch != 'master' && ! (gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

// java-library plugin defines 'api' configuration
// 'api' configuration allows to expose dependencies with 'compile' scope in pom
// 'implementation' configuration allows to expose dependencies with 'runtime' scope in pom
dependencies {
    // web3j dependency
    api "org.web3j:core:4.7.0"
    
    // apache commons.lang3
    api "org.apache.commons:commons-lang3:3.9"

    // feign
    api "io.github.openfeign:feign-jackson:$openFeignVersion"
    api "io.github.openfeign:feign-slf4j:$openFeignVersion"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0"

    // multiaddresses (IPFS)
    implementation 'com.github.multiformats:java-multiaddr:1.3.1'

    //jaxb required with Java 11
    implementation 'javax.xml.bind:jaxb-api:2.3.0'

    //args utils
    implementation 'org.apache.maven.shared:maven-shared-utils:3.2.1'

    // zip
    implementation 'net.lingala.zip4j:zip4j:2.3.1'

    // google core libs
    implementation "com.google.guava:guava:28.2-jre"

    // json
    implementation 'org.json:json:20201115'

    implementation 'ch.qos.logback:logback-classic:1.2.3'

    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:6.0.13.Final'
    implementation 'org.glassfish:javax.el:3.0.0'

    // docker
    implementation "com.github.docker-java:docker-java:${dockerJavaVersion}"
    // Using zerodep until docker client stops blocking after having called
    // listContainersCmd() over httpclient5
    implementation "com.github.docker-java:docker-java-transport-zerodep:${dockerJavaVersion}"

    // failsafe
    implementation 'net.jodah:failsafe:2.4.4'
    //TODO Migrate from Awaitility to Failsafe everywhere
    implementation 'org.awaitility:awaitility:4.1.1'

    // expiring map
    implementation 'net.jodah:expiringmap:0.5.10'

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.0'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    // mock-server
    testImplementation "org.mock-server:mockserver-client-java:$mockServerVersion"
    testImplementation "org.mock-server:mockserver-junit-jupiter:$mockServerVersion"
}


java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform {
        if (isDev) {
            excludeTags 'slow'
        }
    }
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

task itest {
    group 'Verification'
    description 'Runs the integration tests.'
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

// required if we want to embed web3j dependency inside
shadowJar {
    // classifier to produce 2 identified jar files
    archiveClassifier.set('all')
    // include source code in the jar
    from sourceSets.main.allSource
    // avoid duplicate application.properties import from jar and sources
    duplicatesStrategy = 'exclude'
}
build.dependsOn(shadowJar)

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username project.hasProperty('nexusUser') ? nexusUser : ''
                password project.hasProperty('nexusPassword') ? nexusPassword : ''
            }
            url = project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}
