plugins {
    id 'java-library'
    id 'io.freefair.lombok' version '8.10.2'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'maven-publish'
}

group = 'com.iexec.common'

ext {
    mockServerVersion = '5.11.2'
    openFeignVersion = '11.10'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://docker-regis-adm.iex.ec/repository/maven-public/'
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    maven {
        url "https://jitpack.io"
    }
}

//configurations.configureEach {
//    resolutionStrategy.failOnVersionConflict()
//}

// java-library plugin defines 'api' configuration
// 'api' configuration allows to expose dependencies with 'compile' scope in pom
// 'implementation' configuration allows to expose dependencies with 'runtime' scope in pom
dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.0.13')

    // feign
    api "io.github.openfeign:feign-jackson:$openFeignVersion"
    api "io.github.openfeign:feign-slf4j:$openFeignVersion"

    // iexec
    implementation "com.iexec.commons:iexec-commons-poco:$iexecCommonsPocoVersion"

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // commons-io
    implementation 'commons-io:commons-io:2.13.0'

    // apache commons-lang3
    implementation 'org.apache.commons:commons-lang3'

    // xml binding for java 17
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api'

    // zip
    implementation 'net.lingala.zip4j:zip4j:2.11.5'

    // google core libs
    implementation 'com.google.guava:guava:32.1.3-jre'

    implementation 'ch.qos.logback:logback-classic'

    implementation 'jakarta.annotation:jakarta.annotation-api'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.glassfish:jakarta.el:5.0.0-M1'

    // expiring map
    implementation 'net.jodah:expiringmap:0.5.10'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation 'org.assertj:assertj-core'
                implementation 'org.junit.jupiter:junit-jupiter'
                implementation 'org.mockito:mockito-junit-jupiter'
                // mock-server
                implementation "org.mock-server:mockserver-client-java:$mockServerVersion"
                implementation "org.mock-server:mockserver-junit-jupiter:$mockServerVersion"
                // spring-test for ReflectionTestUtils
                implementation 'org.springframework:spring-test'
            }
        }
    }
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

test {
    reports {
        junitXml.required = true
        html.required = true
    }
}

tasks.register('itest') {
    group 'Verification'
    description 'Runs the integration tests.'
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url = project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}
